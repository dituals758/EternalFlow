class EternalFlowApp {
    constructor() {
        this.config = {
            DB_NAME: 'EternalFlowDB',
            DB_VERSION: 3,
            MAX_TITLE_LENGTH: 50
        };

        this.events = [];
        this.editingEventId = null;
        this.filter = 'all';
        this.sort = 'date-asc';
        this.searchQuery = '';
        this.timerInterval = null;
        this.db = null;

        this.init();
    }

    async init() {
        try {
            await this.openDB();
            await this.loadEvents();
            this.setupEventListeners();
            this.startTimers();
            this.renderEvents();
            this.checkNewVersion();
        } catch (error) {
            console.error('Error initializing app:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    async openDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.config.DB_NAME, this.config.DB_VERSION);

            request.onerror = () => reject(request.error);
            request.onsuccess = (event) => {
                this.db = event.target.result;
                resolve();
            };

            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains('events')) {
                    const store = db.createObjectStore('events', {
                        keyPath: 'id',
                        autoIncrement: true
                    });
                    store.createIndex('date', 'date', { unique: false });
                    store.createIndex('createdAt', 'createdAt', { unique: false });
                }
            };
        });
    }

    async loadEvents() {
        return new Promise((resolve, reject) => {
            if (!this.db) {
                reject(new Error('Database not initialized'));
                return;
            }

            const transaction = this.db.transaction(['events'], 'readonly');
            const store = transaction.objectStore('events');
            const request = store.getAll();

            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                this.events = request.result;
                resolve();
            };
        });
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–±—ã—Ç–∏—è
        document.getElementById('openEventFormBtn').addEventListener('click', () => this.openEventForm());
        document.getElementById('closeEventModal').addEventListener('click', () => this.closeEventForm());
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        document.getElementById('saveEventBtn').addEventListener('click', () => this.handleSaveEvent());
        
        // –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
        document.getElementById('searchToggle').addEventListener('click', () => this.toggleSearch());
        document.getElementById('closeSearch').addEventListener('click', () => this.toggleSearch());
        document.getElementById('searchInput').addEventListener('input', (e) => this.handleSearch(e));
        
        document.getElementById('filterToggle').addEventListener('click', () => this.openFilterModal());
        document.getElementById('closeFilterModal').addEventListener('click', () => this.closeFilterModal());
        document.getElementById('filterSelect').addEventListener('change', (e) => this.handleFilterChange(e));
        document.getElementById('sortSelect').addEventListener('change', (e) => this.handleSortChange(e));
        
        // –£—Ç–∏–ª–∏—Ç—ã
        document.getElementById('exportBtn').addEventListener('click', () => this.exportEvents());
        document.getElementById('importBtn').addEventListener('click', () => this.importEvents());
        document.getElementById('clearBtn').addEventListener('click', () => this.clearAllEvents());

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('show');
                }
            });
        });

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
        document.getElementById('eventTitle').addEventListener('input', (e) => {
            if (e.target.value.length > this.config.MAX_TITLE_LENGTH) {
                e.target.value = e.target.value.slice(0, this.config.MAX_TITLE_LENGTH);
            }
        });
    }

    startTimers() {
        if (this.timerInterval) clearInterval(this.timerInterval);
        this.timerInterval = setInterval(() => this.updateAllTimers(), 1000);
    }

    formatTimeDifference(timestamp) {
        const now = Date.now();
        const diff = Math.abs(timestamp - now);
        const isFuture = timestamp > now;
        
        const seconds = Math.floor(diff / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        
        if (days > 0) {
            const years = Math.floor(days / 365);
            const months = Math.floor((days % 365) / 30);
            const weeks = Math.floor((days % 365 % 30) / 7);
            const remainingDays = days % 365 % 30 % 7;
            
            const parts = [];
            if (years > 0) parts.push(this.formatTimePart(years, ['–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç']));
            if (months > 0) parts.push(this.formatTimePart(months, ['–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤']));
            if (weeks > 0) parts.push(this.formatTimePart(weeks, ['–Ω–µ–¥–µ–ª—è', '–Ω–µ–¥–µ–ª–∏', '–Ω–µ–¥–µ–ª—å']));
            if (remainingDays > 0) parts.push(this.formatTimePart(remainingDays, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']));
            
            return isFuture ? `–ß–µ—Ä–µ–∑ ${parts.join(' ')}` : `${parts.join(' ')} –Ω–∞–∑–∞–¥`;
        } else if (hours > 0) {
            const remainingMinutes = minutes % 60;
            const parts = [this.formatTimePart(hours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])];
            if (remainingMinutes > 0) parts.push(this.formatTimePart(remainingMinutes, ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç']));
            return isFuture ? `–ß–µ—Ä–µ–∑ ${parts.join(' ')}` : `${parts.join(' ')} –Ω–∞–∑–∞–¥`;
        } else if (minutes > 0) {
            const remainingSeconds = seconds % 60;
            const parts = [this.formatTimePart(minutes, ['–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])];
            if (remainingSeconds > 0) parts.push(this.formatTimePart(remainingSeconds, ['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥']));
            return isFuture ? `–ß–µ—Ä–µ–∑ ${parts.join(' ')}` : `${parts.join(' ')} –Ω–∞–∑–∞–¥`;
        } else {
            return isFuture ? `–ß–µ—Ä–µ–∑ ${this.formatTimePart(seconds, ['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'])}` : 
                            `${this.formatTimePart(seconds, ['—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'])} –Ω–∞–∑–∞–¥`;
        }
    }

    formatTimePart(value, forms) {
        value = Math.abs(value);
        let formIndex;
        
        if (value % 10 === 1 && value % 100 !== 11) {
            formIndex = 0;
        } else if ([2, 3, 4].includes(value % 10) && ![12, 13, 14].includes(value % 100)) {
            formIndex = 1;
        } else {
            formIndex = 2;
        }
        
        return `${value} ${forms[formIndex]}`;
    }

    renderEvents() {
        const container = document.getElementById('eventsContainer');
        let filteredEvents = this.events;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if (this.filter === 'upcoming') {
            filteredEvents = filteredEvents.filter(event => event.date > Date.now());
        } else if (this.filter === 'past') {
            filteredEvents = filteredEvents.filter(event => event.date <= Date.now());
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
        if (this.searchQuery) {
            const query = this.searchQuery.toLowerCase();
            filteredEvents = filteredEvents.filter(event => 
                event.title.toLowerCase().includes(query)
            );
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        filteredEvents.sort((a, b) => {
            switch (this.sort) {
                case 'date-desc':
                    return b.date - a.date;
                case 'title-asc':
                    return a.title.localeCompare(b.title);
                case 'title-desc':
                    return b.title.localeCompare(a.title);
                default: // date-asc
                    return a.date - b.date;
            }
        });

        // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
        if (filteredEvents.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <p>üìã</p>
                    <p>${this.searchQuery ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç'}</p>
                    ${this.searchQuery ? '<button class="clear-search-btn" id="clearSearchBtn">–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫</button>' : ''}
                </div>
            `;
            
            if (this.searchQuery) {
                document.getElementById('clearSearchBtn').addEventListener('click', () => {
                    this.searchQuery = '';
                    document.getElementById('searchInput').value = '';
                    this.renderEvents();
                });
            }
        } else {
            container.innerHTML = filteredEvents.map(event => this.createEventCard(event)).join('');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
            filteredEvents.forEach(event => {
                document.getElementById(`edit-${event.id}`).addEventListener('click', () => this.editEvent(event.id));
                document.getElementById(`delete-${event.id}`).addEventListener('click', () => this.deleteEvent(event.id));
            });
        }
    }

    createEventCard(event) {
        const isFuture = event.date > Date.now();
        const timeText = this.formatTimeDifference(event.date);
        const statusClass = isFuture ? 'future' : 'past';
        const statusText = isFuture ? '–ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ' : '–ü—Ä–æ—à–µ–¥—à–µ–µ';
        
        return `
            <div class="event-card ${statusClass}" data-id="${event.id}">
                <div class="event-header">
                    <div class="event-title" title="${event.title}">${event.title}</div>
                    <div class="event-status">${statusText}</div>
                </div>
                
                <div class="event-date">${new Date(event.date).toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                })}</div>
                
                <div class="event-time-display">${timeText}</div>
                
                <div class="event-actions">
                    <button id="edit-${event.id}" class="edit-btn" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button id="delete-${event.id}" class="delete-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }

    updateAllTimers() {
        const eventCards = document.querySelectorAll('.event-card');
        
        eventCards.forEach(card => {
            const id = parseInt(card.dataset.id);
            const event = this.events.find(e => e.id === id);
            
            if (!event) return;
            
            const timeElement = card.querySelector('.event-time-display');
            if (timeElement) {
                timeElement.textContent = this.formatTimeDifference(event.date);
            }
        });
    }

    openEventForm() {
        this.editingEventId = null;
        document.getElementById('modalTitle').textContent = '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        document.getElementById('eventTitle').value = '';
        document.getElementById('eventDate').value = '';
        document.getElementById('eventTitleCounter').textContent = `0/${this.config.MAX_TITLE_LENGTH}`;
        document.getElementById('eventModal').classList.add('show');
        document.getElementById('eventTitle').focus();
    }

    closeEventForm() {
        document.getElementById('eventModal').classList.remove('show');
    }

    async handleSaveEvent() {
        const title = document.getElementById('eventTitle').value.trim();
        const dateInput = document.getElementById('eventDate').value;
        
        if (!dateInput) {
            this.showNotification('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è', 'error');
            return;
        }
        
        const date = new Date(dateInput).getTime();

        if (!title) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', 'error');
            return;
        }

        if (date <= Date.now() - 60000) { // –ú–∏–Ω—É—Ç–∞ –¥–æ–ø—É—Å–∫–∞ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
            if (!confirm('–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                return;
            }
        }

        try {
            if (this.editingEventId) {
                await this.updateEvent(this.editingEventId, { title, date });
            } else {
                await this.addEvent(title, date);
            }

            this.closeEventForm();
            await this.loadEvents();
            this.renderEvents();
        } catch (error) {
            console.error('Error saving event:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è', 'error');
        }
    }

    async addEvent(title, date) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction(['events'], 'readwrite');
            const store = transaction.objectStore('events');
            
            const event = {
                title,
                date,
                createdAt: Date.now()
            };
            
            const request = store.add(event);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                this.showNotification('–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
                resolve();
            };
        });
    }

    editEvent(id) {
        const event = this.events.find(e => e.id === id);
        if (!event) return;

        this.editingEventId = id;
        document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ';
        document.getElementById('eventTitle').value = event.title;
        document.getElementById('eventTitleCounter').textContent = `${event.title.length}/${this.config.MAX_TITLE_LENGTH}`;
        
        const date = new Date(event.date);
        const formattedDate = date.toISOString().slice(0, 16);
        document.getElementById('eventDate').value = formattedDate;
        
        document.getElementById('eventModal').classList.add('show');
        document.getElementById('eventTitle').focus();
    }

    async updateEvent(id, updates) {
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction(['events'], 'readwrite');
            const store = transaction.objectStore('events');
            
            const request = store.get(id);
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                const event = request.result;
                Object.assign(event, updates);
                
                const putRequest = store.put(event);
                putRequest.onerror = () => reject(putRequest.error);
                putRequest.onsuccess = () => {
                    this.showNotification('–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', 'success');
                    resolve();
                };
            };
        });
    }

    async deleteEvent(id) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?')) return;

        try {
            const transaction = this.db.transaction(['events'], 'readwrite');
            const store = transaction.objectStore('events');
            await store.delete(id);
            
            this.showNotification('–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            await this.loadEvents();
            this.renderEvents();
        } catch (error) {
            console.error('Error deleting event:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', 'error');
        }
    }

    async clearAllEvents() {
        if (!confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;

        try {
            const transaction = this.db.transaction(['events'], 'readwrite');
            const store = transaction.objectStore('events');
            await store.clear();
            
            this.events = [];
            this.showNotification('–í—Å–µ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã', 'success');
            this.renderEvents();
        } catch (error) {
            console.error('Error clearing events:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ', 'error');
        }
    }

    toggleSearch() {
        const searchExpanded = document.getElementById('searchExpanded');
        const isExpanded = searchExpanded.style.display === 'block';
        
        searchExpanded.style.display = isExpanded ? 'none' : 'block';
        
        if (!isExpanded) {
            document.getElementById('searchInput').focus();
        } else {
            this.searchQuery = '';
            document.getElementById('searchInput').value = '';
            this.renderEvents();
        }
    }

    handleSearch(e) {
        this.searchQuery = e.target.value;
        this.renderEvents();
    }

    openFilterModal() {
        document.getElementById('filterSelect').value = this.filter;
        document.getElementById('sortSelect').value = this.sort;
        document.getElementById('filterModal').classList.add('show');
    }

    closeFilterModal() {
        document.getElementById('filterModal').classList.remove('show');
    }

    handleFilterChange(e) {
        this.filter = e.target.value;
        this.renderEvents();
        this.closeFilterModal();
    }

    handleSortChange(e) {
        this.sort = e.target.value;
        this.renderEvents();
        this.closeFilterModal();
    }

    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.className = `notification ${type} show`;
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }

    exportEvents() {
        if (this.events.length === 0) {
            this.showNotification('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'info');
            return;
        }

        const dataStr = JSON.stringify(this.events, null, 2);
        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
        
        const exportFileDefaultName = `EternalFlow-export-${new Date().toISOString().slice(0, 10)}.json`;
        
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();
        
        this.showNotification('–°–æ–±—ã—Ç–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    importEvents() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = (event) => {
                try {
                    const importedEvents = JSON.parse(event.target.result);
                    
                    if (!Array.isArray(importedEvents)) {
                        throw new Error('Invalid file format');
                    }
                    
                    const validEvents = importedEvents.filter(event => 
                        event && typeof event.title === 'string' && typeof event.date === 'number'
                    );
                    
                    if (validEvents.length === 0) {
                        throw new Error('No valid events found in file');
                    }
                    
                    if (confirm(`–ù–∞–π–¥–µ–Ω–æ ${validEvents.length} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
                        this.performImport(validEvents);
                    }
                } catch (error) {
                    console.error('Error importing events:', error);
                    this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'error');
                }
            };
            
            reader.readAsText(file);
        };
        
        input.click();
    }

    async performImport(eventsToImport) {
        try {
            const transaction = this.db.transaction(['events'], 'readwrite');
            const store = transaction.objectStore('events');
            
            for (const event of eventsToImport) {
                await new Promise((resolve, reject) => {
                    const request = store.add({
                        title: event.title,
                        date: event.date,
                        createdAt: event.createdAt || Date.now()
                    });
                    
                    request.onsuccess = () => resolve();
                    request.onerror = () => reject(request.error);
                });
            }
            
            await this.loadEvents();
            this.showNotification(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${eventsToImport.length} —Å–æ–±—ã—Ç–∏–π`, 'success');
            this.renderEvents();
        } catch (error) {
            console.error('Error importing events:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏–π', 'error');
        }
    }

    checkNewVersion() {
        const lastVersion = localStorage.getItem('eternalFlowVersion');
        if (!lastVersion || lastVersion !== '1.4.0') {
            this.showNotification('EternalFlow –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ 1.4.0!', 'info');
            localStorage.setItem('eternalFlowVersion', '1.4.0');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    new EternalFlowApp();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('./service-worker.js')
            .then(registration => {
                console.log('SW registered: ', registration);
            })
            .catch(registrationError => {
                console.log('SW registration failed: ', registrationError);
            });
    }
});